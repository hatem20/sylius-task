<?php

namespace AppBundle\Repository;

use phpDocumentor\Reflection\Types\Boolean;
use Sylius\Bundle\CoreBundle\Doctrine\ORM\ProductRepository as BaseProductRepository;
use Sylius\Component\Resource\Model\ResourceInterface;
use Sylius\Component\Resource\Repository\RepositoryInterface;

/**
 * StockRoomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StockRoomRepository extends \Doctrine\ORM\EntityRepository implements RepositoryInterface
{
    public function setDefault(int $id, bool $newIsDefaultVal) : bool
    {
        //this would be better documented with BDD
        //i wrote test cases on paper
        $qb = $this->createQueryBuilder('p');

        $qb
            ->select('p')
            ->where('p.isDefault = true');

        $currentDefaultStockRoom = $qb->getQuery()->getSingleResult()->getId();

        if ($currentDefaultStockRoom == 1) {

            if ($id == 1) {
                if ($newIsDefaultVal) {
                    return 1;
                } else {
                    return 0;
                }
            } else {

                if ($newIsDefaultVal) {
                    $q = $qb
                        ->update('AppBundle:StockRoom','p')
                        ->set('p.isDefault', 'false')
                        ->where('p.id = 1')
                        ->getQuery();

                    $q->execute();

                    return 1;
                } else {
                    return 1;
                }
            }

        } else {
            if ($id == 1) {
                if ($newIsDefaultVal) {

                    $q = $qb
                        ->update('AppBundle:StockRoom','p')
                        ->set('p.isDefault', 'false')
                        ->getQuery();

                    $q->execute();

                    return 1;
                } else {
                    return 1;
                }
            } else {

                if ($newIsDefaultVal) {
                    return 1;
                } else {

                    $q = $qb
                        ->update('AppBundle:StockRoom','p')
                        ->set('p.isDefault', 'true')
                        ->where('p.id = 1')
                        ->getQuery();

                    $q->execute();

                    return 1;
                }
            }
        }
    }

    public function remove(ResourceInterface $resource): void
    {
        // TODO: Implement remove() method.
    }

    public function getClassName()
    {
        // TODO: Implement getClassName() method.
    }

    public function add(ResourceInterface $resource): void
    {
        // TODO: Implement add() method.
    }

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        // TODO: Implement findBy() method.
    }

    public function findAll()
    {
        // TODO: Implement findAll() method.
    }

    public function createPaginator(array $criteria = [], array $sorting = []): iterable
    {
        // TODO: Implement createPaginator() method.
    }
}
